<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

<!--3번예제 spring3
		xml에서 p네임스페이스 방법을 이용(property태그는 라인이 너무 길어진다)
		p:멤버변수="값" p:멤버변수-ref="상대방 빈즈의 id값"
-->
<bean id="monitor" class="spring3.SystemMonitor"
		p:periodTime="10" p:sender-ref="smsSender">
<!-- <property name="periodTime">
    <value>10</value>
  </property>
  <property name="sender">
    <ref bean="smsSender"></ref>
  </property> -->
</bean>

<!-- id값은 마땅하게 부여할 이름이 없으면 보통 관례로 클래스명으로 준다.(첫글자는 소문자로 부여) -->
<bean id="smsSender" class="spring3.SmsSender" />

<!-- 4번예제 spring4
  생성자constructor injection
  index를 부여하지 않으면? 입력순서대로 적용이 된다.
 -->
 <bean id="monitor2" class="spring4.SystemMonitor"
 		c:periodTime="40" c:sender-ref="smsSender2">
    <!-- <constructor-arg value="30" /> -->
<!--     <constructor-arg>
      <ref bean="smsSender2" />
    </constructor-arg> -->
<!--     <constructor-arg ref="smsSender2"/> -->
 </bean>
 
 <bean id="smsSender2" class="spring4.SmsSender" />

	<!-- spring5(임의의 빈 객체를 전달하는 방법)(익명객체를 전달받아서 사용하는 방법) -->
	<bean id="monitor3" class="spring5.SystemMonitor"
		p:periodTime="50">
		<property name="sender">
			<!-- <ref bean="smsSender3" /> -->
			<bean class="spring5.SmsSender">
			  <constructor-arg value="true" />
			</bean>
		</property>
	</bean>

<!--    <bean id="smsSender3" class="spring5.SmsSender">
     <constructor-arg value="true" />
   </bean> -->
   
 <!-- spring6
 자료형이 List 라면 <list> 태그로 감싼다
 id와 동일한 기능을 가진 속성명 > name
 -->
 <bean name="performanceMonitor" class="spring6.PerformanceMonitor"
 scope="prototype">
   <property name="number">
     <list>
        <value>0.2</value>
        <value>0.5</value>
     </list>
   </property>
 </bean>
 
 <!-- spring7 -->
 <bean name="customer"  class="spring7.Customer">
     <property name="subSet">
       <set>
         <value>1</value>
         <value>4</value>
       </set>
     </property>
 </bean>
 
 <!-- spring8
 Properties(key,value)
 <props>
 	<props key="키명">값</props>
 </props>
 -->
  <bean name="bookClient"  class="spring8.BookClient">
     <property name="prop">
       <props>
         <prop key="server">192.168.0.35</prop>
         <prop key="connectionTimeout">5000</prop>
       </props>
     </property>
 </bean>
 
 <!-- spring9 -->
 <bean name="protocolHanderFactory"  class="spring9.ProtocolHanderFactory">
   <property name="map">
     <map>
       <entry>
          <key><value>soap</value></key>
          <ref bean="soapHandler" />
       </entry>
       <entry>
          <key><value>rest</value></key>
          <ref bean="restHandler" />
       </entry>
     </map>
   </property>
 </bean>
 <bean name="soapHandler"  class="spring9.SoapHandler"></bean>
 <bean name="restHandler"  class="spring9.RestHandler"></bean>
 
</beans>